#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# This file is part of the pattern-clustering project.
# https://github.com/nokia/pattern-clustering

__author__     = "Marc-Olivier Buob"
__maintainer__ = "Marc-Olivier Buob"
__email__      = "marc-olivier.buob@nokia-bell-labs.com"
__copyright__  = "Copyright (C) 2022, Nokia"
__license__    = "BSD-3"

import os
import sys


def find(dir_name :str = ".", extension :str = "") -> iter:
    """
    Creates an iterator over files stored in a given directory and
    matching an extension.
    Args:
        dir_name: The directory to process.
        extension: The extension of files of interest. Pass "" if not relevant.
    Returns:
        The corresponding iterator.
    """
    return (
        os.path.join(root, f)
        for (root, dirs, files) in os.walk(dir_name)
        for f in files
        if f.endswith(extension)
    )

def find_cpp_sources(
    use_pyplusplus :bool = False,
    sources_ext :str = "cpp",
    headers_ext :str = "hpp",
    sources_dir :str = "src",
    headers_dir :str = "src"
) -> list:
    """
    Find sources required to produce a python package involving C++ code.
    Args:
        use_pyplusplus: Pass `True` if the binding required by python to wrap
            the C++ code must be automatically generated using Py++. If so,
            the `binding_auto.cpp` file is automatically and generated to this end.
            Otherwise, we assume that the bindings are manually declared in
            `binding.cpp`.
        sources_ext: The extension used for C++ sources files.
        headers_ext: The extension used for C++ headers files.
        sources_dir: The directory containing the C++ sources. It may involves
            subdirectories.
        headers_dir: The directory containing the C++ headers. It may involves
            subdirectories.
    Returns:
        The list of relevant C++ files.
    """
    if use_pyplusplus:
        # Py++ can automatically generate python bindings under some limitations:
        # - it supports well std:: streams (like `std::cout`) and `std::string`;
        # - it does not automatically wrap `std::`containers (like `std::vector`);
        # - it does not support well parameters typed by a `std::container`;
        # - it does not handle well references (for instance, do not return a reference);
        # - the read property of `std::vector` is the only one automatically supported.
        # See https://pyplusplus.readthedocs.io/en/latest/tutorials/containers/indexing_suite_v2.html.html
        try:
            from pyplusplus import make_bindings_auto
            filename_bindings_auto = os.path.join(sources_dir, "bindings_auto.cpp")
            make_bindings_auto(headers_dir, headers_ext, filename_bindings_auto)
            # Ignore bindings manually written
            exclude = "bindings.cpp"
        except ImportError:
            raise RuntimeError("Py++ is not installed.", sys.stderr)
    else:
        # Ignore bindings generated by py++
        # The developer must manually write/complete bindings.cpp
        exclude = "bindings_auto.cpp"

    sources = [
        f
        for f in find(sources_dir, sources_ext)
        if f != os.path.join(sources_dir, exclude)
    ]
    return sources
